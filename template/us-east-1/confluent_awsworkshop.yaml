Parameters:
    BootStrapServers:
      Description: Your Confluent Cloud Kafka Bootstrap Servers
      Type: String
    ApiKey:
      Description: Your Confluent Cloud API Key
      Type: String
    ApiSecret:
      Description: Your Confluent Cloud API Secret
      Type: String
    YourEmail:
      Description: Your email to tag AWS resources
      Type: String
  
Resources:
    LauncherRole:
      Type: 'AWS::IAM::Role'
      Properties:
        AssumeRolePolicyDocument:
          Version: 2012-10-17
          Statement:
            - Effect: Allow
              Principal:
                Service: lambda.amazonaws.com
              Action: 'sts:AssumeRole'
    
    StreamingFunction:
      Type: 'AWS::Lambda::Function'
      DependsOn: LauncherRole
      Properties:
        Handler: KafkaProducer.lambda_handler
        Runtime: python3.7
        FunctionName: !Sub '${AWS::StackName}_ConfluentStreamingFunction'
        Environment:
          Variables:
            BOOTSTRAP_SERVERS: !Ref BootStrapServers
            SASL_PASSWORD: !Ref ApiSecret
            SASL_USERNAME: !Ref ApiKey
        Code:
          S3Bucket: cflt-horizontal-workshopz
          S3Key: ConfluentProducerLambda_working.zip
        Description: >-
          The lambda function that create and stream data into Confluent Cloud
          Kafka topic
        MemorySize: 1024
        Timeout: 600
        Tags:
          - Key: "owner_email"
            Value: !Ref YourEmail
        Role: !GetAtt 
          - LauncherRole
          - Arn
    
    Gateway:
      Type: 'AWS::ApiGateway::RestApi'
      Properties:
        Description: Confluent API gateway
        ApiKeySourceType: HEADER
        EndpointConfiguration:
          Types:
            - REGIONAL
        Name: !Sub '${AWS::StackName}_AppflowGateway'
        Tags:
          - Key: "owner_email"
            Value: !Ref YourEmail
  
    ResourceCreateConnection:
      Type: 'AWS::ApiGateway::Resource'
      Properties:
        RestApiId: !Ref Gateway
        ParentId: !GetAtt 
          - Gateway
          - RootResourceId
        PathPart: RunCreditDataGenerator
  
    MethodCreateConnection:
      Type: 'AWS::ApiGateway::Method'
      Properties:
        AuthorizationType: NONE
        HttpMethod: POST
        ApiKeyRequired: true
        Integration:
          IntegrationHttpMethod: POST
          Type: AWS_PROXY
          Uri: !Sub 
            - >-
              arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaArn}/invocations
            - lambdaArn: !GetAtt 
                - StreamingFunction
                - Arn
        ResourceId: !Ref ResourceCreateConnection
        RestApiId: !Ref Gateway
    
    GatewayDeployment:
      Type: 'AWS::ApiGateway::Deployment'
      DependsOn:
        - MethodCreateConnection
      Properties:
        RestApiId: !Ref Gateway
        StageName: GatewayDeployment
  
    GatewayStage:
      Type: 'AWS::ApiGateway::Stage'
      Properties:
        StageName: !Sub '${AWS::StackName}_GatewayStage'
        Tags:
          - Key: "owner_email"
            Value: !Ref YourEmail
        Description: Confluent Stage
        RestApiId: !Ref Gateway
        DeploymentId: !Ref GatewayDeployment
        MethodSettings:
          - ResourcePath: /stack
            HttpMethod: POST
            MetricsEnabled: 'true'
            DataTraceEnabled: 'false'
            ThrottlingBurstLimit: '999'
    
    lambdaApiGatewayInvoke:
      Type: 'AWS::Lambda::Permission'
      Properties:
        Action: 'lambda:InvokeFunction'
        FunctionName: !GetAtt 
          - StreamingFunction
          - Arn
        Principal: apigateway.amazonaws.com
        SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${Gateway}/*/*/*'
  
    UsagePlan:
      Type: 'AWS::ApiGateway::UsagePlan'
      DependsOn:
        - GatewayDeployment
      Properties:
        ApiStages:
          - ApiId: !Ref Gateway
            Stage: !Ref GatewayStage
        Description: Confluent Usage plan
        Tags:
          - Key: "owner_email"
            Value: !Ref YourEmail
        Quota:
          Limit: 5000
          Period: MONTH
        Throttle:
          BurstLimit: 200
          RateLimit: 100
        UsagePlanName: !Sub '${AWS::StackName}_UsagePlan'
  
    UsagePlanKey:
      Type: 'AWS::ApiGateway::UsagePlanKey'
      Properties:
        KeyId: !Ref GatewayApiKey
        KeyType: API_KEY
        UsagePlanId: !Ref UsagePlan
  
    GatewayApiKey:
      Type: 'AWS::ApiGateway::ApiKey'
      DependsOn:
        - GatewayDeployment
      Properties:
        Name: !Sub '${AWS::StackName}_GatewayApiKey'
        Description: Confluent API Key V1
        Enabled: true
        GenerateDistinctId: false
        Tags:
          - Key: "owner_email"
            Value: !Ref YourEmail
        StageKeys:
          - RestApiId: !Ref Gateway
            StageName: !Ref GatewayStage
    
    ReadListS3:
      Type: 'AWS::IAM::Policy'
      Properties:
        PolicyName: !Sub '${AWS::StackName}_ReadListS3'
        Roles:
          - !Ref LauncherRole
        PolicyDocument:
          Version: 2012-10-17
          Statement:
            - Sid: Stmt1524515862554
              Action:
                - 's3:GetObject'
                - 's3:ListBucket'
                - 's3:ListObjects'
              Effect: Allow
              Resource: '*'
  
    SaveLogs:
      Type: 'AWS::IAM::Policy'
      Properties:
        PolicyName: !Sub '${AWS::StackName}_LogPolicy'
        Roles:
          - !Ref LauncherRole
        PolicyDocument:
          Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action:
                - 'logs:CreateLogGroup'
                - 'logs:CreateLogStream'
                - 'logs:PutLogEvents'
                - 'logs:DescribeLogStreams'
              Resource: '*'
    VPC:
      Type: 'AWS::EC2::VPC'
      Properties:
        EnableDnsSupport: true
        EnableDnsHostnames: true
        CidrBlock: 10.0.0.0/16
        Tags:
          - Key: Name
            Value: CONFLUENT-DEMO-VPC
          - Key: "owner_email"
            Value: !Ref YourEmail
  
    InternetGateway:
      Type: 'AWS::EC2::InternetGateway'
      Properties:
        Tags:
          - Key: "owner_email"
            Value: !Ref YourEmail
  
    GatewayAttachement:
      Type: 'AWS::EC2::VPCGatewayAttachment'
      Properties:
        VpcId: !Ref VPC
        InternetGatewayId: !Ref InternetGateway
      
    PublicRouteTable:
      Type: 'AWS::EC2::RouteTable'
      Properties:
        VpcId: !Ref VPC
        Tags:
          - Key: "owner_email"
            Value: !Ref YourEmail
  
    PublicRoute:
      Type: 'AWS::EC2::Route'
      DependsOn: GatewayAttachement
      Properties:
        RouteTableId: !Ref PublicRouteTable
        DestinationCidrBlock: 0.0.0.0/0
        GatewayId: !Ref InternetGateway
  
    PublicSubnetOneRouteTableAssociation:
      Type: 'AWS::EC2::SubnetRouteTableAssociation'
      Properties:
        SubnetId: !Ref PublicSubnetOne
        RouteTableId: !Ref PublicRouteTable
  
    VPCSubnet01RouteTableAssociation:
      Type: 'AWS::EC2::SubnetRouteTableAssociation'
      Properties:
        SubnetId: !Ref VPCSubnet01
        RouteTableId: !Ref PublicRouteTable
  
    ConfluentSecurityGroup:
      Type: 'AWS::EC2::SecurityGroup'
      Properties:
        GroupDescription: Enable Cluster access via port 5439
        Tags:
          - Key: "owner_email"
            Value: !Ref YourEmail
        VpcId: !Ref VPC
        SecurityGroupIngress:
          - IpProtocol: tcp
            FromPort: 5439
            ToPort: 5439
            CidrIp: 0.0.0.0/0
          - CidrIp: 0.0.0.0/0
            IpProtocol: tcp
            FromPort: 3306
            ToPort: 3306
  
    PublicSubnetOne:
      Type: 'AWS::EC2::Subnet'
      Properties:
        AvailabilityZone: !Select 
          - 0
          - !GetAZs 
            Ref: 'AWS::Region'
        VpcId: !Ref VPC
        CidrBlock: 10.0.0.0/24
        MapPublicIpOnLaunch: true
        Tags:
          - Key: Name
            Value: ConfluentDemoPublicSubnet
          - Key: "owner_email"
            Value: !Ref YourEmail
  
    RedshiftCluster:
      Type: 'AWS::Redshift::Cluster'
      DependsOn: ConfluentSecurityGroup
      Properties:
        ClusterType: single-node
        NodeType: dc2.large
        DBName: streaming-data
        MasterUsername: awsuser
        MasterUserPassword: Awsuser01
        ClusterParameterGroupName: !Ref RedshiftClusterParameterGroup
        VpcSecurityGroupIds:
          - !Ref ConfluentSecurityGroup
        ClusterSubnetGroupName: !Ref RedshiftClusterSubnetGroup
        PubliclyAccessible: 'true'
        Port: '5439'
        Tags:
          - Key: "owner_email"
            Value: !Ref YourEmail
  
    RedshiftClusterParameterGroup:
      Type: 'AWS::Redshift::ClusterParameterGroup'
      Properties:
        Description: Cluster parameter group
        Tags:
          - Key: "owner_email"
            Value: !Ref YourEmail
        ParameterGroupFamily: redshift-1.0
        Parameters:
          - ParameterName: enable_user_activity_logging
            ParameterValue: 'true'
  
    RedshiftClusterSubnetGroup:
      Type: 'AWS::Redshift::ClusterSubnetGroup'
      Properties:
        Description: Cluster subnet group
        Tags:
          - Key: "owner_email"
            Value: !Ref YourEmail
        SubnetIds:
          - !Ref PublicSubnetOne
  
    myDBSubnetGroup:
      Type: 'AWS::RDS::DBSubnetGroup'
      Properties:
        DBSubnetGroupDescription: description
        Tags:
          - Key: "owner_email"
            Value: !Ref YourEmail
        SubnetIds:
          - !Ref PublicSubnetOne
          - !Ref VPCSubnet01
    MyDB:
      DependsOn: ConfluentSecurityGroup
      Type: 'AWS::RDS::DBInstance'
      Properties:
        AllocatedStorage: '20'
        PubliclyAccessible: 'true'
        AllowMajorVersionUpgrade: 'false'
        StorageType: gp2
        BackupRetentionPeriod: '0'
        DBInstanceClass: db.m5.large
        Engine: MySQL
        EngineVersion: 5.7.31
        MasterUsername: admin
        MasterUserPassword: Password123
        DBSnapshotIdentifier: 'arn:aws:rds:us-east-1:635910096382:snapshot:confluentdemopublic'
        VPCSecurityGroups:
          - !Ref ConfluentSecurityGroup
        DBSubnetGroupName: !Ref myDBSubnetGroup
        Tags:
          - Key: "owner_email"
            Value: !Ref YourEmail
  
    VPCSubnet01:
      Type: 'AWS::EC2::Subnet'
      Properties:
        AvailabilityZone: !Select 
          - 1
          - !GetAZs 
            Ref: 'AWS::Region'
        CidrBlock: 10.0.1.0/24
        MapPublicIpOnLaunch: true
        VpcId: !Ref VPC
        Tags:
          - Key: Name
            Value: !Sub '${AWS::StackName}-Workshop'
          - Key: "owner_email"
            Value: !Ref YourEmail
            
Outputs:
    ApiGatewayInvokeURL:
      Description: API Gateway URL
      Value: !Sub >-
        https://${Gateway}.execute-api.${AWS::Region}.amazonaws.com/GatewayStage/RunCreditDataGenerator
    RedshiftEndpoint:
      Description: Redshift Cluster Endpoint
      Value: !GetAtt 
        - RedshiftCluster
        - Endpoint.Address
    MySqlEndpoint:
      Description: MySql Endpoint
      Value: !GetAtt 
        - MyDB
        - Endpoint.Address
  